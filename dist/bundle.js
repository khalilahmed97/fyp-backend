(()=>{var e={600:e=>{"use strict";e.exports=require("@vladmandic/face-api")},729:e=>{"use strict";e.exports=require("bcryptjs")},44:e=>{"use strict";e.exports=require("canvas")},577:e=>{"use strict";e.exports=require("cors")},818:e=>{"use strict";e.exports=require("dotenv")},252:e=>{"use strict";e.exports=require("express")},829:e=>{"use strict";e.exports=require("jsonwebtoken")},461:e=>{"use strict";e.exports=require("multer")},12:e=>{"use strict";e.exports=require("mysql2")},896:e=>{"use strict";e.exports=require("fs")},928:e=>{"use strict";e.exports=require("path")},23:e=>{"use strict";e.exports=require("util")},604:(e,s,r)=>{const t=r(12).createConnection({host:process.env.DB_HOST,user:process.env.DB_USER,password:process.env.DB_PASSWORD,database:process.env.DB_DATABASE});e.exports=t},679:(e,s,r)=>{const t=r(461),a=r(928),o=t.diskStorage({destination:function(e,s,r){return r(null,a.join(__dirname,"../../uploads/voters/"))},filename:function(e,s,r){console.log(s),r(null,a.extname(s.originalname))}}),n=t({storage:o}).single("file");e.exports={upload:n}},15:(e,s,r)=>{const t=r(604),a=r(896),o=r(928),n=r(23);e.exports={getCandidates:async(e,s)=>{const{id:r}=e.params;try{console.log(r),t.query("SELECT * FROM accepted_candidates WHERE position_applied=?",[r],((e,r)=>e?s.status(500).json({message:"Error Occurred! "+e}):r.length>0?s.status(200).send(r):0===r.length?s.status(200).send([]):s.status(404).send({message:"Candidate not found"})))}catch(e){return s.status(500).json({message:e.message})}},addCandidate:(e,s)=>{const{cnic:r,name:n,email:c,gender:i,membershipNumber:d,organization:u,position:l,pic:g,cnicPic:p}=e.body;if(!(n&&r&&c&&i&&d&&u&&l&&g&&p))return s.status(200).send("All fields are required");const m=`${r}.jpg`,E=o.join("uploads","candidates","cnic_front",m),f=Buffer.from(p.front.replace(/^data:image\/\w+;base64,/,""),"base64"),v=o.join("uploads","candidates","cnic_back",m),h=Buffer.from(p.back.replace(/^data:image\/\w+;base64,/,""),"base64"),R=`${r}.jpg`,C=o.join("uploads","candidates","image",R),y=Buffer.from(g.replace(/^data:image\/\w+;base64,/,""),"base64");t.query("SELECT * FROM candidates WHERE cnic = ? OR email_address = ?",[r,c],((e,g)=>e?s.status(500).send("Error Occurred in Database Connection! "):g.length>0?s.status(200).send("Error! Candidate is Already Registered!"):(console.log("Database Domain"),void a.mkdir(o.join("uploads","candidates","image"),{recursive:!0},(e=>{if(e)return s.status(500).send("Error creating directory! "+e);a.writeFile(C,y,(e=>{if(e)return console.error("Error saving user image:",e),s.status(500).send("Error saving user image");console.log("Person Image saved:",R),a.mkdir(o.join("uploads","candidates","cnic_back"),{recursive:!0},(e=>{if(e)return s.status(500).send("Error creating directory! "+e);a.writeFile(E,f,(e=>{if(e)return console.error("Error saving cnic image:",e),s.status(500).send("Error saving cnic image");console.log("Cnic Back Image saved:",m)}))})),a.mkdir(o.join("uploads","candidates","cnic_front"),{recursive:!0},(e=>{if(e)return s.status(500).send("Error creating directory! "+e);a.writeFile(v,h,(e=>{if(e)return console.error("Error saving cnic image:",e),s.status(500).send("Error saving cnic image");console.log("Cnic Front Image saved:",m),t.query("INSERT INTO candidates (name, cnic, email_address, organization, membership_number, gender, position_applied) VALUES (?,?,?,?,?,?,?)",[n,r,c,u,d,i,l],((e,r)=>e?s.status(500).send("ERROR OCCURRED in DB! "+e):s.status(200).send("Candidate Form Submitted Successfully!")))}))}))}))})))))},getAllCandidates:(e,s)=>{try{t.query("SELECT * FROM candidates",((e,r)=>e?s.status(500).json({message:"Error Occurred! "+e}):r.length>0?s.status(200).send(r):void 0))}catch(e){return s.status(500).json({message:"ERROR OCCURRED! "+e})}},approveAndAddToAcceptedList:async(e,s)=>{const{id:r}=e.params;try{t.query("UPDATE candidates SET status = 'Approve' WHERE cnic = ?",[r],((e,a)=>e?s.status(500).send("Error occurred while approving candidate: "+e.message):a.affectedRows>0?void t.query("SELECT * FROM candidates WHERE cnic = ?",[r],((e,r)=>{if(e)return s.status(500).send("Error occurred while fetching candidate details: "+e.message);if(!(r.length>0))return s.status(403).send("Candidate not found after approval");{const{name:e,cnic:a,email_address:o,organization:n,membership_number:c,gender:i,position_applied:d}=r[0];t.query("SELECT * FROM accepted_candidates WHERE cnic = ?",[a],((r,u)=>r?s.status(500).send("Error occurred while searching in accepted candidate list: "+r.message):u.length>0?s.status(200).send("Candidate Already Added to Accepted List!"):void t.query("INSERT INTO accepted_candidates (name, cnic, email_address, organization, membership_number, gender, position_applied) VALUES (?,?,?,?,?,?,?)",[e,a,o,n,c,i,d],((e,r)=>e?s.status(500).send("Error occurred while adding candidate to accepted list: "+e.message):s.status(200).send("Candidate approved and added to the accepted list successfully!")))))}})):s.status(404).json({message:"Candidate not found for approval"})))}catch(e){return s.status(500).json({message:e.message})}},disapproveCandidate:async(e,s)=>{const{id:r}=e.params;try{console.log(r),t.query("UPDATE candidates SET status = 'Disapprove' WHERE cnic = ?",[r],((e,a)=>e?s.status(500).send("Error Occurred! "+e):a.affectedRows>0?void t.query("DELETE FROM accepted_candidates WHERE cnic = ?",[r],((e,r)=>e?s.status(500).send("Error Occurred! "+e):r.affectedRows>0?s.status(200).send("Candidate Disapproved and Deleted From Approved List"):s.status(200).send("Candidate Disapproved"))):s.status(404).send("Candidate not found")))}catch(e){return s.status(500).send(e.message)}},getAllAcceptedCandidates:(e,s)=>{try{t.query("SELECT * FROM accepted_candidates",((e,r)=>{if(e)return s.status(500).json({message:"ERROR OCCURRED! "+e});if(r.length>0){const e=r.map((e=>{const s=o.join("uploads","candidates","image",`${e.cnic}.jpg`);let r=null;console.log(s);try{a.existsSync(s)&&(r=a.readFileSync(s,{encoding:"base64"}))}catch(e){console.error("Error reading image file:",e)}return{...e,imageData:r?`data:image/jpeg;base64,${r}`:null}}));return s.status(200).send(e)}return s.status(200).send([])}))}catch(e){return s.status(500).json({message:"ERROR OCCURRED! "+e})}},getSpecificCandidate:async(e,s)=>{const r=e.params.id,c=n.promisify(a.readFile);try{t.query("SELECT * FROM candidates WHERE cnic = ?",[r],(async(e,t)=>{if(e)return console.error("Database query error:",e),s.status(500).json({message:"Error Occurred! "+e});if(!(t.length>0))return console.warn("Candidate not found for ID:",r),s.status(404).json({message:"Candidate Not Found!"});{const a=t[0],n=o.join(__dirname,"../../uploads/candidates/image",`${r}.jpg`),i=o.join(__dirname,"../../uploads/candidates/cnic_front",`${r}.jpg`),d=o.join(__dirname,"../../uploads/candidates/cnic_back",`${r}.jpg`);try{console.log("Attempting to read images from:",n,i,d);const[e,r,t]=await Promise.all([c(n),c(i),c(d)]);return a.image=e.toString("base64"),a.cnic_front=r.toString("base64"),a.cnic_back=t.toString("base64"),s.status(200).json(a)}catch(e){return console.error("Error reading images:",e),s.status(500).json({message:"Error Reading Images! "+e})}}}))}catch(e){return console.error("Unexpected error:",e),s.status(500).json({message:"ERROR OCCURRED! "+e})}}}},843:(e,s,r)=>{const t=r(729),a=r(604),o=r(829),n=r(44),c=r(600),{Canvas:i,Image:d,ImageData:u}=n,l=r(896);c.env.monkeyPatch({Canvas:i,Image:d,ImageData:u});const g="src/models";(async()=>{await c.nets.ssdMobilenetv1.loadFromDisk(g),await c.nets.faceLandmark68Net.loadFromDisk(g),await c.nets.faceRecognitionNet.loadFromDisk(g),console.log("Models Loaded Successfully")})().catch(console.error);const p=async(e,s)=>{try{const r=await(async e=>{try{const s=await n.loadImage(e),r=await c.detectSingleFace(s).withFaceLandmarks().withFaceDescriptor();if(!r)throw new Error("No face detected in the image.");return r.descriptor}catch(e){throw console.error("Error in getFaceDescriptor:",e),e}})(e),t=await n.loadImage(s),a=await c.detectSingleFace(t).withFaceLandmarks().withFaceDescriptor();if(!a)throw new Error("No face detected in the provided image.");const o=a.descriptor,i=new c.LabeledFaceDescriptors("image1",[r]);return new c.FaceMatcher([i],.6).findBestMatch(o)}catch(e){throw console.error("Error comparing face descriptors:",e),e}};e.exports={setUserLogin:async(e,s)=>{const{cnic:r,password:n,image:c}=e.body;if(!r||!n||!c)return s.status(200).json({message:"CNIC, Password, and Image are required"});if("4210137949601"===r&&"12345678"===n){const e=`uploads/admin/${r}.jpg`,t=Buffer.from(c.replace(/^data:image\/\w+;base64,/,""),"base64"),a=await p(e,t);if("unknown"===a.label)return s.status(200).json({message:"Face Authentication Failed"});console.log(a.label);const n={cnic:r},i=o.sign(n,process.env.SECRET_KEY,{expiresIn:"15m"}),d=o.sign(n,process.env.REFRESH_KEY);return s.status(200).json({message:"Login Successfull!",role:"admin",user:{name:"Khalil Ahmed Sharif",cnic:r},profilePic:c,accessToken:i,refreshToken:d,faceAuthenticate:!0})}try{const e="SELECT * FROM voters WHERE cnic = ?";a.query(e,[r],(async(e,a)=>{if(e)return console.error("Error in search query:",e),s.status(500).json({message:"Error Occurred! "+e});if(0===a.length)return s.status(200).json({message:"User with provided CNIC does not exist!"});const i=await t.compare(n,a[0].password);if(!i)return s.status(200).json({message:"Incorrect Password!"});if(i){const e=`uploads/voters/${r}.jpg`,t=Buffer.from(c.replace(/^data:image\/\w+;base64,/,""),"base64"),n=await p(e,t);if("unknown"===n.label)return s.status(200).json({message:"Face Authentication Failed"});{console.log(n.label);const e={cnic:r},t=o.sign(e,process.env.SECRET_KEY,{expiresIn:"15m"}),i=o.sign(e,process.env.REFRESH_KEY);return s.status(200).json({message:"Login Successfull!",role:"voter",user:a[0],profilePic:c,accessToken:t,refreshToken:i,faceAuthenticate:!0})}}}))}catch(e){return console.error("Error in setUserLogin:",e),s.status(500).json({message:"Error Occurred! "+e})}},setRegisterUser:async(e,s)=>{const{name:r,cnic:o,email:n,password:c,phone:i,gender:d,membershipNumber:u,organization:g,image:p}=e.body;if(!(r&&o&&n&&c&&i&&p))return s.status(400).json({message:"All fields are required"});const m=`${o}.jpg`,E=`uploads/voters/${m}`,f=Buffer.from(p.replace(/^data:image\/\w+;base64,/,""),"base64");try{l.writeFileSync(E,f),console.log("Image saved:",m);const e=await t.hash(c,10);console.log("Hashed Password:",e);const p="SELECT * FROM voters WHERE cnic = ? OR email = ?",v="INSERT INTO voters (name, cnic, email, password, phoneNumber, gender, membershipNumber, organization) VALUES (?,?,?,?,?,?,?,?)";a.query(p,[o,n],((t,c)=>{t&&(console.error("Error in search query:",t),s.status(500).json({message:"Error Occurred! "+t})),c.length>0&&s.status(400).json({message:"User Already Registered!"}),a.query(v,[r,o,n,e,i,d,u,g],((e,r)=>{e&&(console.error("Error in insert query:",e),s.status(500).json({message:"Error Occurred! "+e})),s.status(200).json({message:"User Registered Successfully!"})}))}))}catch(e){console.error("Error in setRegisterUser:",e),s.status(500).json({message:"Error Occurred! "+e})}},getAllVoters:(e,s)=>{try{a.query("SELECT * FROM voters",((e,r)=>e?(console.error("Error in search query:",e),s.status(500).json({message:"Error Occurred! "+e})):s.status(200).send(r)))}catch(e){return console.error("Error in getAllVoters:",e),s.status(500).json({message:"Error Occurred! "+e})}},voteCast:(e,s)=>{const{id:r}=e.params,{position:t,candidateCnic:o}=e.body;let n,c,i;switch(console.log(t),t){case"President":c="is_president_voted",i="president_choice";break;case"Vice President":c="is_vp_voted",i="vp_choice";break;case"Sr. Vice President":c="is_sr_vp_voted",i="sr_vp_choice";break;case"General Secretary":c="is_gen_sec_voted",i="gen_sec_choice";break;default:return s.status(400).json({message:"Invalid position"})}n=`UPDATE voters SET ${c} = true, ${i} = ? WHERE cnic = ?`;try{a.query("SELECT * FROM voters WHERE cnic = ?",[r],((e,t)=>e?(console.error("Error in search query:",e),s.status(500).json({message:"Error Occurred! "+e})):0===t.length?s.status(404).json({message:"Voter not found"}):void a.query(n,[o,r],((e,r)=>{if(e)return console.error("Error in updating voter:",e),s.status(500).json({message:"Error Occurred! "+e});a.query("UPDATE accepted_candidates SET votes = votes + 1 WHERE cnic = ?",[o],((e,r)=>e?(console.error("Error in updating candidate:",e),s.status(500).json({message:"Error Occurred! "+e})):s.status(200).json({message:"Vote cast successfully"})))}))))}catch(e){return console.error("Error in voteCast:",e),s.status(500).json({message:"Error Occurred! "+e})}},voteCheck:async(e,s)=>{const r=e.params.id;console.log(r);try{a.query("SELECT is_president_voted, is_vp_voted, is_sr_vp_voted, is_gen_sec_voted FROM voters WHERE cnic=?",[r],((e,r)=>e?(console.error("Error in search query:",e),s.status(500).json({message:"Error Occurred! "+e})):0===r.length?s.status(404).json({message:"No voter found with the provided CNIC."}):(console.log(r[0]),s.status(200).send(r[0]))))}catch(e){return console.error("Error in getAllVoters:",e),s.status(500).json({message:"Error Occurred! "+e})}}}},471:(e,s,r)=>{const t=r(252),{getCandidates:a,addCandidate:o,getAllCandidates:n,approveAndAddToAcceptedList:c,disapproveCandidate:i,getAllAcceptedCandidates:d,getSpecificCandidate:u}=r(15),l=t.Router();l.route("/addCandidate").post(o),l.route("/allCandidates").get(n),l.route("/candidates/:id").get(a),l.route("/approve/:id").patch(c),l.route("/disapprove/:id").patch(i),l.route("/allAcceptedCandidates").get(d),l.route("/:id").get(u),e.exports=l},396:(e,s,r)=>{const t=r(252),{upload:a}=r(679),{setUserLogin:o,setRegisterUser:n,getAllVoters:c,voteCast:i,voteCheck:d}=r(843),u=t.Router();u.route("/register").post(n),u.route("/login").post(o),u.route("/allVoters").get(c),u.route("/voteCast/:id").post(i),u.route("/voteCheck/:id").get(d),u.route("/token"),e.exports=u}},s={};function r(t){var a=s[t];if(void 0!==a)return a.exports;var o=s[t]={exports:{}};return e[t](o,o.exports,r),o.exports}const t=r(252),a=r(818),o=r(577);a.config();const n=r(604),c=t(),i=r(396),d=r(471),u=process.env.PORT;c.use(t.json({limit:"50mb"})),c.use(t.urlencoded({extended:!1})),c.use(o({origin:"*",methods:["GET","POST","PUT","PATCH","DELETE"],credentials:!0})),n.connect((e=>{e&&console.log("ERROR OCCURED WHILE CONNECTING WITH DATABASE ",e),console.log("DATABASE CONNECTED SUCCESSFULY!")})),c.use("/api/voter/",i),c.use("/api/candidate/",d),c.listen(u,(()=>{console.log(`Server running on port ${u}`)}))})();